@page "/RulesetBrowser"
@page "/Rulesets"
@attribute [Authorize]

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IRulesetDataService RulesetDataService
@inject IScrimRulesetManager RulesetManager
@inject NavigationManager NavManager

@implements IDisposable

<div class="container-fluid" style="margin-top: 16px;">

    <div class="row">

        <div class="col-lg-8" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container default" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray);">
                <h4>Ruleset Browser</h4>

                @if (_showNewRulesetForm)
                {
                    <div class="sq-content sans-serif-font" style="font-family: Roboto, 'Segoe UI', sans-serif; margin: 8px 0 16px 0; padding: 8px 16px; border: 1px solid var(--sq-black-alpha-50); border-radius: 0.2rem; width: max-content; box-shadow: 0px 1px 3px 0px var(--sq-light-blue-gray); font-size: 0.9rem;">

                        <div style="font-weight: 500; font-size: 1rem; margin-bottom: 8px;">New Ruleset</div>

                        <EditForm Model="@_newRuleset" OnValidSubmit="OnCreateNewRulesetSubmit" style="">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Name:</span><InputText @bind-Value=@_newRuleset.Name maxlength="100" pattern="^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Default Round Length:</span><InputNumber min="1" type="text" @bind-Value=@_newRuleset.DefaultRoundLength style="display: inline-block; width: 64px; padding-left: 4px;" /><span style="padding-left: 8px;">seconds</span></div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Default Match Title:</span><InputText @bind-Value=@_newRuleset.DefaultMatchTitle maxlength="100" pattern="(?!.)$|^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>

                            <div style="margin: 8px 0 0 0; font-size: 0.9rem;"><InputCheckbox style="position: relative; top: 1px;" @bind-Value="_openNewRulesetOnSave" /><span style="padding-left: 8px;">Open Ruleset On Save?</span></div>

                            <div style="text-align: right; margin-top: 12px;">

                                <button type="submit" class="btn btn-primary" style="display: inline-block; margin:0; width: 85px;" title="Create new ruleset">
                                    <span class="oi oi-check"></span>Save
                                </button>

                                <button @onclick="OnCreateNewRulesetCancel" class="btn btn-outline-primary" style="display: inline-block;  margin:0 0 0 8px; width: 85px;" title="Cancel creating new ruleset">
                                    <span class="oi oi-x" style="top: 0;"></span>Cancel
                                </button>

                            </div>

                        </EditForm>
                    </div>
                }
                else if (_showImportRulesetForm)
                {
                    <div class="sq-content sans-serif-font" style="font-family: Roboto, 'Segoe UI', sans-serif; margin: 8px 0 16px 0; padding: 8px 16px; border: 1px solid var(--sq-black-alpha-50); border-radius: 0.2rem; width: max-content; box-shadow: 0px 1px 3px 0px var(--sq-light-blue-gray); font-size: 0.9rem;">

                        <div style="font-weight: 500; font-size: 1rem; margin-bottom: 0;">Import Ruleset</div>

                        <p style="margin: 0 0 4px 0; padding: 0; font-size: smaller;">Create a new ruleset from a ruleset JSON file.</p>

                        <EditForm Model="@_selectedImportRulesetFileName" OnValidSubmit="(() => OnImportNewRulesetFormSubmit(false))" style="display: inline-block; margin-top: 8px;">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            @if (!_isImportingRuleset)
                            {
                                <span style="width: 110px; padding-right: 4px; display: inline-block;">Ruleset:</span><InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" @bind-Value="@_selectedImportRulesetFileName">

                                    @if (string.IsNullOrWhiteSpace(_selectedImportRulesetFileName))
                                            {
                                        <option value=@_selectedImportRulesetFileName label="Select a ruleset to import" style="font-style: italic;">Select a ruleset to import</option>
                                            }
                                            else
                                            {
                                        <option value=@_selectedImportRulesetFileName label="@_selectedImportRulesetFileName">@_selectedImportRulesetFileName</option>
                                            }

                                    @foreach (var fileName in _rulesetFileNames.Where(r => r != _selectedImportRulesetFileName))
                                            {
                                        <option value=@fileName label="@fileName">@fileName</option>
                                            }
                                </InputSelect>

                                <div style="margin: 8px 0 0 0; font-size: 0.9rem;"><InputCheckbox style="position: relative; top: 1px;" @bind-Value="_openImportedRulesetOnSave" /><span style="padding-left: 8px;">Open Ruleset On Save?</span></div>

                                <div style="text-align: right; margin-top: 12px;">

                                    <button type="submit" @onclick="(() => OnImportNewRulesetFormSubmit(true))" class="btn btn-primary" style="display: inline-block; margin:0; width: 85px;" title="Import rileset file as new ruleset">
                                        <span class="oi oi-data-transfer-upload"></span>Import
                                    </button>

                                    <button @onclick="OnImportRulesetCancel" class="btn btn-outline-primary" style="display: inline-block;  margin:0 0 0 8px; width: 85px;" title="Cancel importing ruleset file">
                                        <span class="oi oi-x" style="top: 0;"></span>Cancel
                                    </button>

                                </div>
                            }
                            else
                            {
                                <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Ruleset:</span>@_selectedImportRulesetFileName</div>

                                <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Use Compact Layout:</span>@(_openImportedRulesetOnSave ? "Yes" : "No")</div>

                                <div class="thin">
                                    <SpinnerEllipsis />
                                </div>
                            }
                        </EditForm>
                    </div>
                }
                else
                {
                    <button class="btn btn-outline-primary" @onclick="ToggleCreateNewRulesetFormVisibility" style="display: inline-block; margin: 4px 0 24px 0; font-size: small;">
                        <span class="oi oi-plus"></span>New Ruleset
                    </button>

                    <button class="btn btn-outline-primary" @onclick="OnShowImportRulesetForm" style="display: inline-block; margin: 4px 0 24px 8px; font-size: small;">
                        <span class="oi oi-data-transfer-upload"></span>Import Ruleset
                    </button>
                }


                <table style="width: 100%; border-bottom: 1px solid var(--sq-gray);" class="table-responsive-sm table-striped-light">
                    <thead>
                        <tr style="line-height: 1.2; font-size: 0.85rem; vertical-align: bottom; background-color: transparent; font-family: Roboto, 'Segoe UI', sans-serif; border-bottom: 1px solid var(--sq-gray);">
                            @if (_containsActiveRuleset)
                            {
                                <th style="width: 20px; padding-left: 8px;"></th>
                            }

                            @if ((_containsActiveRuleset && _isDefaultRulesetActive) || (!_containsActiveRuleset && _containsRealDefaultRuleset))
                            {
                                <th style="width: 20px; padding-left: 8px;"></th>
                            }

                            <th style="font-weight: 300;">Name <span style="color: var(--sq-gray);">[ID]</span></th>
                            <th style="font-weight: 300;">Created</th>
                            <th style="font-weight: 300;">Edited</th>
                            <th style="font-weight: 300;"></th>
                            <th style="font-weight: 300;"></th>
                        </tr>
                    </thead>

                    @if (_storeRulesetList != null)
                    {
                        <tbody class="sans-serif-font" style="@(_isLoadingRulesetList ? "opacity: 0.5;" : string.Empty)">
                            @foreach (var ruleset in _storeRulesetList)
                            {
                                <tr>
                                    @if (_containsActiveRuleset)
                                    {
                                        @if (IsActiveRuleset(ruleset.Id))
                                        {
                                            <td title="Active Ruleset" style="width: 20px; padding-left: 8px;">
                                                <span class="oi oi-target" style=""></span>
                                            </td>

                                        }
                                        else if (_isDefaultRulesetActive)
                                        {
                                            <td></td>
                                        }
                                    }

                                    @if ((_containsActiveRuleset && _isDefaultRulesetActive) || (_containsRealDefaultRuleset && !IsActiveRuleset(ruleset.Id)))
                                    {
                                        @if (IsDefaultRuleset(ruleset.Id))
                                        {
                                            <td title="Default Ruleset" style="width: 20px; padding-left: 8px;">
                                                <span class="oi oi-pin" style=""></span>
                                            </td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }

                                    <td>@ruleset.Name <span style="color: var(--sq-gray);">[@ruleset.Id]</span></td>
                                    <td>@GetLocalizedDateTimeString(ruleset.DateCreated)</td>
                                    <td>@(ruleset.DateLastModified != null ? $"{GetLocalizedDateTimeString((DateTime)ruleset.DateLastModified)}" : "--")</td>
                                    <td>
                                        <NavLink class="nav-link" href=@($"ruleset/{ruleset.Id}?edit=false") target="_self" style="padding: 4px 8px;">View<span class="oi oi-external-link" style="padding-left: 8px; font-size: 0.7rem;"></span></NavLink>
                                    </td>
                                    @if (ruleset.IsDefault)
                                    {
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>
                                            <NavLink class="nav-link" href=@($"ruleset/{ruleset.Id}?edit=true") target="_self" style="padding: 4px 8px;">Edit<span class="oi oi-external-link" style="padding-left: 8px; font-size: 0.7rem;"></span></NavLink>
                                        </td>
                                    }

                                    @if (IsDefaultRuleset(ruleset.Id))
                                    {
                                        <td></td>
                                    }
                                    else if (_isDefaultingRuleset)
                                    {
                                        <td style="min-width: 60px; width: 132px; text-align: center;">
                                            <div class="btn btn-icon-primary" style="margin-left: calc(50% - 10px); padding-top: 0.375rem; padding-bottom: 0.375rem; margin-top: 0.2rem; margin-bottom: 0.2rem;">
                                                <span class="oi oi-reload spin"></span>
                                            </div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td style="width: 132px;">
                                            <div class="btn btn-outline-primary" style="padding: 4px 8px; display: inline-block;" @onclick="@(() => OnSetAsDefaultClick(ruleset.Id))">
                                                <span class="oi oi-pin" style="padding-right: 4px; padding-left: 0.1rem;"></span>Set as Default
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    }
                </table>

                @if (_isLoadingRulesetList)
                {
                    <div class="thin">
                        <SpinnerEllipsis />
                    </div>
                }
                else
                {

                    <div style="margin: 8px auto 1px auto; width: 200px; text-align: center;">
                        @if (_renderedHasPreviousPage)
                        {
                            <NavLink title="Go to previous page" class="nav-link btn btn-outline-primary" href=@($"/rulesets?page={_renderedPageIndex - 1}") style="padding: 4px 8px; display: inline-block;">
                                <span class="oi oi-caret-left" style="padding-right: 0.1rem;"></span>
                            </NavLink>
                        }
                        else
                        {
                            <div class="btn btn-outline-primary disabled" style="padding: 4px 8px; color: var(--sq-gray); display: inline-block;">
                                <span class="oi oi-caret-left" style="padding-right: 0.1rem;"></span>
                            </div>
                        }


                        <div style="padding: 4px 8px; display: inline-block;"><span style="font-size: 1.1rem; padding-right: 8px; color: var(--sq-pink);">@_renderedPageIndex</span><span style="color: var(--sq-gray);">/ @_renderedPageCount</span></div>

                        @if (_renderedHasNextPage)
                        {
                            <NavLink title="Go to next page" class="nav-link btn btn-outline-primary" href=@($"/rulesets?page={_renderedPageIndex + 1}") style="padding: 4px 8px; display: inline-block;">
                                <span class="oi oi-caret-right" style="padding-right: 0rem; padding-left: 0.1rem;"></span>
                            </NavLink>
                        }
                        else
                        {
                            <div class="btn btn-outline-primary disabled" style="padding: 4px 8px; color: var(--sq-gray); display: inline-block;">
                                <span class="oi oi-caret-right" style="padding-right: 0rem; padding-left: 0.1rem;"></span>@*Next*@
                            </div>
                        }

                    </div>
                }

            </div>

        </div>

    </div>
</div>


@code {
    [Parameter]
    public int i_pageIndex { get; set; } = 1;
    public int _renderedPageIndex { get; set; } = 1;

    [Parameter]
    public int? _uriPageIndex { get; set; }

    private int _defaultPageIndex { get; set; } = 1;

    private List<Ruleset> _storeRulesetList { get; set; }

    private int _renderedPageCount { get; set; } = 0;
    private bool _renderedHasNextPage { get; set; } = false;
    private bool _renderedHasPreviousPage { get; set; } = false;

    private bool _isLoadingRulesetList { get; set; } = true;
    private bool _isDefaultingRuleset { get; set; } = false;
    private bool _isImportingRuleset { get; set; } = false;

    private bool _containsActiveRuleset { get; set; } = false;
    private bool _containsRealDefaultRuleset { get; set; } = false;
    private bool _isDefaultRulesetActive { get; set; } = false;

    private CancellationTokenSource ctsRulesets;

    #region New Ruleset Form
    private Ruleset _newRuleset { get; set; } = new Ruleset();

    private bool _showNewRulesetForm { get; set; } = false;
    private bool _openNewRulesetOnSave { get; set; } = true;
    #endregion New Ruleset Form

    #region Import Ruleset Form
    private List<string> _rulesetFileNames { get; set; } = new List<string>();

    private string _selectedImportRulesetFileName { get; set; } = string.Empty;

    private bool _showImportRulesetForm { get; set; } = false;
    private bool _openImportedRulesetOnSave { get; set; } = true;
    #endregion

    private string _debug { get; set; } = string.Empty;


    #region Initialization Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        if (ctsRulesets != null)
        {
            ctsRulesets.Cancel();
            ctsRulesets.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedPageIndex = i_pageIndex;

        await LoadRulesetListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        UpdateUriParameters();

        _renderedPageIndex = i_pageIndex;
        await LoadRulesetListAsync();

        paramsChanged = true;

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetListAsync()
    {
        _isLoadingRulesetList = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (ctsRulesets != null)
        {
            ctsRulesets.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        ctsRulesets = newCTS;

        try
        {

            var paginatedList = await RulesetDataService.GetRulesetListAsync(_renderedPageIndex, ctsRulesets.Token);

            ctsRulesets.Token.ThrowIfCancellationRequested();

            _storeRulesetList = new List<Ruleset>();

            _storeRulesetList.AddRange(paginatedList.Contents);

            _renderedPageCount = paginatedList.PageCount;
            _renderedHasNextPage = paginatedList.HasNextPage;
            _renderedHasPreviousPage = paginatedList.HasPreviousPage;

            var realDefaultRuleset = _storeRulesetList.Where(r => IsDefaultRuleset(r.Id)).FirstOrDefault();
            _containsRealDefaultRuleset = (realDefaultRuleset != null);

            var activeRuleset = _storeRulesetList.Where(r => IsActiveRuleset(r.Id)).FirstOrDefault();
            _containsActiveRuleset = (activeRuleset != null);

            _isDefaultRulesetActive = (_containsRealDefaultRuleset && _containsActiveRuleset && (realDefaultRuleset.Id == activeRuleset.Id));
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (ctsRulesets == newCTS)
        {
            ctsRulesets = null;
        }

        _isLoadingRulesetList = false;
    }
    #endregion Initialization Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetListAsync();

            StateHasChanged();
        }
    }
    #endregion Event Handling

    #region Form Controls
    private async void OnSetAsDefaultClick(int rulesetId)
    {
        _isDefaultingRuleset = true;

        await RulesetDataService.SetCustomDefaultRulesetAsync(rulesetId);

        await LoadRulesetListAsync();

        _isDefaultingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private async void OnCreateNewRulesetSubmit()
    {
        var newRuleset = _newRuleset;

        if (string.IsNullOrWhiteSpace(newRuleset.Name))
        {
            return;
        }

        var newRulesetEntity = await RulesetDataService.SaveNewRulesetAsync(newRuleset);

        _newRuleset = new Ruleset();

        _showNewRulesetForm = false;

        if (_openNewRulesetOnSave && newRulesetEntity != null)
        {
            NavManager.NavigateTo($"/ruleset/{newRulesetEntity.Id}?edit=true");
        }
        else
        {
            await LoadRulesetListAsync();
        }

        InvokeAsyncStateHasChanged();
    }

    private void OnCreateNewRulesetCancel()
    {
        _newRuleset = new Ruleset();

        _showNewRulesetForm = false;
    }

    private void ToggleCreateNewRulesetFormVisibility()
    {
        _showNewRulesetForm = !_showNewRulesetForm;
    }


    private void OnShowImportRulesetForm()
    {
        _showImportRulesetForm = true;

        _rulesetFileNames = new List<string>();

        var fileNames = RulesetDataService.GetJsonRulesetFileNames();

        if (fileNames != null)
        {
            _rulesetFileNames.AddRange(fileNames);
        }

        InvokeAsyncStateHasChanged();
    }

    private async void OnImportNewRulesetFormSubmit(bool isManualClick)
    {
        if (string.IsNullOrWhiteSpace(_selectedImportRulesetFileName) || !isManualClick)
        {
            return;
        }

        _isImportingRuleset = true;
        InvokeAsyncStateHasChanged();

        var importedRulesetEntity = await RulesetDataService.ImportNewRulesetFromJsonFile(_selectedImportRulesetFileName, false, false);

        if (_openImportedRulesetOnSave && importedRulesetEntity != null)
        {
            NavManager.NavigateTo($"/ruleset/{importedRulesetEntity.Id}?edit=true");
        }
        else
        {
            await LoadRulesetListAsync();

            _showImportRulesetForm = false;
        }

        _isImportingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private void OnImportRulesetCancel()
    {
        _showImportRulesetForm = false;
    }

    private void ToggleImportNewRulesetFormVisibility()
    {
        _showImportRulesetForm = !_showImportRulesetForm;
    }
    #endregion Form Controls

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var qPage))
        {
            if (int.TryParse(qPage, out int page))
            {
                if (_uriPageIndex != page)
                {
                    _uriPageIndex = page;
                    i_pageIndex = page;
                    _renderedPageIndex = page;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriPageIndex != null)
                {
                    stateChanged = true;
                }

                _uriPageIndex = null;
                i_pageIndex = _defaultPageIndex;
                _renderedPageIndex = _defaultPageIndex;
            }
        }

        return stateChanged;
    }

    private bool IsActiveRuleset(int rulesetId)
    {
        return RulesetDataService.ActiveRulesetId == rulesetId;
    }

    private bool IsDefaultRuleset(int rulesetId)
    {
        return rulesetId == RulesetDataService.CustomDefaultRulesetId;
    }

    private string GetLocalizedDateTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("g")}";
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}

