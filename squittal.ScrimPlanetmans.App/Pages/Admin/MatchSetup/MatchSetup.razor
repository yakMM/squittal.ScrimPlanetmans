@page "/Admin"
@page "/MatchSetup"
@attribute [Authorize]

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.App.Pages.Admin.MatchSetup.MatchTeamComposer;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.Models.ScrimEngine
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using System.Threading;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchScorer MatchScorer
@inject IItemService ItemService
@inject IFacilityService FacilityService
@inject IZoneService ZoneService
@inject IWorldService WorldService
@inject IScrimRulesetManager RulesetManager

@implements IDisposable

<div class="container-fluid">

    @if (!string.IsNullOrWhiteSpace(_errorBannerMessage))
    {
        <ErrorMessageBanner i_ErrorMessage="@_errorBannerMessage" />
    }

    <div class="row">

        <div class="col-lg-4">
            <TeamComposer i_teamOrdinal=1 />
        </div>

        <div class="col-lg-4">
            <TeamComposer i_teamOrdinal=2 />
        </div>

        <div class="col-lg-4">

            <div class="header-card-container default">

                <div style="display: grid; grid-template-columns: 1fr 115px;">
                    @if (string.IsNullOrWhiteSpace(_matchConfiguration.Title))
                    {
                        <h5>@(_currentRound == 0 ? string.Empty : $"Round {_currentRound}:") @Enum.GetName(typeof(MatchState), _matchState)</h5>
                    }
                    else
                    {
                        <h5>@(_matchConfiguration.Title)@(_currentRound == 0 ? string.Empty : $" - Round {_currentRound}"): @Enum.GetName(typeof(MatchState), _matchState)</h5>
                    }
                    <div class="mono-font" style="font-size: 18px; text-align: right;">
                        <MatchTimer Debug=false />
                    </div>
                </div>

                @* TODO: (1) Move buttons to own components, (2) add hover text to buttons *@
                @if (_isLoading || _isResettingRound || _isClearingMatch || _isStartingRound || _isChangingRuleset || _isEndingRound || _isLoadingActiveRulesetConfig)
                {
                    <span class="thin">
                        <SpinnerEllipsis />
                    </span>
                }
                else if (_matchState == MatchState.Uninitialized && _currentRound == 0 && !_isChangingRuleset)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>Start Match
                    </button>
                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(false))" title="Clear all team data, match data, and match configuration">
                        <span class="oi oi-eject"></span>Clear Match
                    </button>
                }
                else if (_matchState == MatchState.Stopped && _currentRound >= 1)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>Start Round @(_currentRound + 1)
                    </button>
                    @if (!_isDeleteDataEnabled)
                    {
                        <button disabled class="btn btn-outline-primary">
                            <span class="oi oi-media-step-backward"></span>Reset Round
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="ResetRound">
                            <span class="oi oi-media-step-backward"></span>Reset Round
                        </button>
                    }
                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(true))" title="Set up a new match with the same teams" style="width: 120px;">
                        <span class="oi oi-media-step-forward"></span>Rematch
                    </button>

                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(false))" title="Set up a new match with new teams" style="width: 120px;">
                        <span class="oi oi-eject"></span>New Match
                    </button>

                    <div style="margin: 0.2rem 0;" title="Check to enable the Reset Round button">
                        <EditForm Model="@_isDeleteDataEnabled">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <InputCheckbox id="isDeleteDataEnabledCheckBox" @bind-Value="@_isDeleteDataEnabled" style="position: relative; top: 1px;" /> Enable Round Resetting
                        </EditForm>
                    </div>
                }
                else if (_matchState == MatchState.Paused)
                {
                    <button class="btn btn-primary" @onclick="ResumeRound">
                        <span class="oi oi-media-play"></span>Resume
                    </button>
                }
                else if (_matchState == MatchState.Running)
                {
                    <button class="btn btn-primary" @onclick="PauseRound">
                        <span class="oi oi-media-pause"></span>Pause Round
                    </button>
                    <button class="btn btn-outline-primary" @onclick="EndRound">
                        <span class="oi oi-media-stop"></span> End Round
                    </button>
                }

                @if ((_matchState == MatchState.Uninitialized || _matchState == MatchState.Stopped) && !(_isLoading || _isResettingRound || _isClearingMatch || _isStartingRound || _isChangingRuleset || _isLoadingRulesets || _isLoadingActiveRulesetConfig))
                {
                    @if (_currentRound == 0 && _rulesets != null && _rulesets.Any() && _selectedRuleset != null && !string.IsNullOrWhiteSpace(_inputSelectRulesetStringId))
                    {
                        <EditForm Model="@_inputSelectRulesetStringId" style="display: inline-block; margin-top: 8px;">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <span style="width: 110px; padding-right: 4px; display: inline-block;">Ruleset:</span><InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" Value="@_inputSelectRulesetStringId" ValueChanged="@((string s) => OnChangeRulesetSelection(s))" ValueExpression="@(() => _inputSelectRulesetStringId)">

                                <option value=@_selectedRuleset.Id.ToString() label="@($"{_selectedRuleset.Name} [{_selectedRuleset.Id}]")">@_selectedRuleset.Name [@_selectedRuleset.Id.ToString()]</option>

                                @foreach (var ruleset in _rulesets.Where(r => r.Id != _selectedRuleset.Id))
                                {
                                    <option value=@ruleset.Id.ToString() label="@($"{ruleset.Name} [{ruleset.Id}]")">@ruleset.Name [@ruleset.Id.ToString()]</option>
                                }
                            </InputSelect>
                        </EditForm>
                    }

                    <EditForm Model="@_matchConfiguration" style="margin-top: 0.5rem;">

                        <p style="margin-bottom: 0.5rem;"><div style="width: 110px; padding-right: 4px; display: inline-block;">Match Title:</div><InputText id="matchTitle" Value="@_matchConfiguration.Title" ValueChanged="@((string s) => OnChangeMatchTitle(s))" ValueExpression="@(() => _matchConfiguration.Title)" style="width: 250px;" maxlength="100" pattern="(?!.)$|^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" /></p>
                        <p style="margin-bottom: 0.5rem;"><span style="width: 110px; padding-right: 4px; display: inline-block;">Round Length:</span><InputNumber min="1" type="text" id="roundSecondsTotal" Value="@_matchConfiguration.RoundSecondsTotal" ValueChanged="@((int s) => _matchConfiguration.TrySetRoundLength(s, true))" ValueExpression="@(() => _matchConfiguration.RoundSecondsTotal)" /><span style="padding-left: 4px; width: 64px;">seconds</span></p>

                        <div style="margin-bottom: 0.2rem;">
                            <p style="margin-bottom: 0.2rem;">Scrim Server & Base: </p>


                            @if (_worlds != null)
                            {
                                <InputSelect TValue="string" style="margin-right: 5px; width: 125px; padding: 0.1rem;" Value="@_matchConfiguration.WorldIdString" ValueChanged="@((string s) => _matchConfiguration.TrySetWorldId(s, true, false))" ValueExpression="@(() => _matchConfiguration.WorldIdString)">
                                    @foreach (var world in _worlds)
                                    {
                                        <option value=@world.Id.ToString() label="@world.Name">@world.Name (@world.Id.ToString())</option>
                                    }
                                </InputSelect>
                            }

                            @if (_mapZones != null && _mapRegions != null && _zones != null)
                            {
                                <InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" @bind-Value=@_matchConfiguration.FacilityIdString>
                                    <option value=@_noFacilitIdValue>No Base</option>

                                    @foreach (var zone in _mapZones)
                                            {
                                        <optgroup label="@(_zones.Where(z => zone == z.Id).Select(z => z.Name).FirstOrDefault())" style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-size: 1rem;">@(_zones.Where(z => zone == z.Id).Select(z => z.Name).FirstOrDefault())</optgroup>

                                        @foreach (var region in _mapRegions.Where(r => r.ZoneId == zone))
                                                {
                                            <option value=@region.FacilityId.ToString() label="@region.FacilityName">@region.FacilityName (@region.FacilityId.ToString())</option>
                                                }
                                            }
                                </InputSelect>
                            }
                        </div>

                        <p style="margin-bottom: 0.2rem; margin-top: 8px;"><InputCheckbox id="endRoundOnCapture" Value="@_matchConfiguration.EndRoundOnFacilityCapture" ValueChanged="@((bool b) => _matchConfiguration.TrySetEndRoundOnFacilityCapture(b, true))" ValueExpression="@(() => _matchConfiguration.EndRoundOnFacilityCapture)" style="position: relative; top: 1px;" /><span style="padding-left: 8px;">End Round on Base Capture</span></p>
                    </EditForm>
                }

                @if (!string.IsNullOrWhiteSpace(_matchId))
                {
                    <p style="color: var(--sq-gray); margin-bottom: 0.2rem; margin-top: 0.5rem;">Match Id: @_matchId</p>
                }

            </div>

            <div class="sq-mini-card-12">
                <AdminLog />
            </div>

            <div class="sq-mini-card-12">
                <StreamLog />
            </div>

        </div>

    </div>

</div>

@code {
    private string _roundSecondsInput = string.Empty;
    private MatchConfiguration _matchConfiguration { get; set; }

    #region Ruleset Select List Variables
    private IEnumerable<Ruleset> _rulesets { get; set; }

    private Ruleset _inputSelectRuleset { get; set; }

    private string _inputSelectRulesetStringId { get; set; }

    private Ruleset _activeRuleset { get; set; }
    private Ruleset _selectedRuleset { get; set; }

    private bool _isLoading { get; set; } = false;
    private bool _isLoadingRulesets { get; set; } = false;
    private bool _isChangingRuleset { get; set; } = false;
    private bool _isLoadingActiveRulesetConfig { get; set; } = false;

    #endregion Ruleset Select List Variables

    #region Facility & World Select List Variables
    private IEnumerable<MapRegion> _mapRegions { get; set; }
    private List<int> _mapZones { get; set; } = new List<int>();
    private IEnumerable<Zone> _zones { get; set; }
    private string _noFacilitIdValue { get; set; } = "-1";

    private IEnumerable<World> _worlds { get; set; }
    #endregion

    private bool _isStreamServiceEnabled { get; set; } = false;

    private string _errorBannerMessage { get; set; }

    private bool _isStartingRound { get; set; } = false;
    private bool _isClearingMatch { get; set; } = false;
    private bool _isResettingRound { get; set; } = false;
    private bool _isEndingRound { get; set; } = false;

    private bool _isDeleteDataEnabled { get; set; } = false;

    private bool _isRunning = false;
    private int _currentRound = 0;
    private MatchState _matchState = MatchState.Uninitialized;

    private string _matchId = string.Empty;

    #region Initialization Methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;

            var TaskList = new List<Task>();

            var censusStreamStatusTask = GetCensusStreamStatus();
            TaskList.Add(censusStreamStatusTask);

            var zonesTask = ZoneService.GetAllZones();
            TaskList.Add(zonesTask);

            var worldsTask = WorldService.GetAllWorldsAsync();
            TaskList.Add(worldsTask);

            var rulesetsTask = SetUpRulesetsAsync();
            TaskList.Add(rulesetsTask);

            var activeRulesetConfigTask = SetUpActiveRulesetConfigAsync();
            TaskList.Add(activeRulesetConfigTask);

            await Task.WhenAll(TaskList);

            _worlds = worldsTask.Result.OrderBy(worlds => worlds.Name).ToList();

            _zones = zonesTask.Result;

            _isLoading = false;
            InvokeAsyncStateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateMessageEvent;
        MessageService.RaiseMatchConfigurationUpdateEvent += ReceiveMatchConfigurationUpdateMessageEvent;
        MessageService.RaiseRulesetSettingChangeEvent += ReceiveRulesetSettingChangeEvent;

        if (ScrimMatchEngine.MatchConfiguration != null)
        {
            _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
        }
        else
        {
            _matchConfiguration = new MatchConfiguration();
        }

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();
        _matchId = ScrimMatchEngine.GetMatchId();
    }

    public void Dispose()
    {
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateMessageEvent;
        MessageService.RaiseMatchConfigurationUpdateEvent -= ReceiveMatchConfigurationUpdateMessageEvent;
        MessageService.RaiseRulesetSettingChangeEvent -= ReceiveRulesetSettingChangeEvent;
    }

    private async Task SetUpRulesetsAsync()
    {
        _isLoadingRulesets = true;
        InvokeAsyncStateHasChanged();

        _rulesets = await RulesetManager.GetRulesetsAsync(CancellationToken.None);

        _isLoadingRulesets = false;
        InvokeAsyncStateHasChanged();
    }

    private async Task SetUpActiveRulesetConfigAsync()
    {
        _isLoadingActiveRulesetConfig = true;

        _activeRuleset = await RulesetManager.GetActiveRulesetAsync();

        if (_activeRuleset != null)
        {
            _selectedRuleset = _activeRuleset;
            _inputSelectRulesetStringId = _activeRuleset.Id.ToString();

            if (_matchConfiguration != null)
            {
                _matchConfiguration.TrySetRoundLength(_activeRuleset.DefaultRoundLength, false);
                _matchConfiguration.TrySetEndRoundOnFacilityCapture(_activeRuleset.DefaultEndRoundOnFacilityCapture, false);

                var oldTitle = _matchConfiguration.Title;
                var newTitle = _activeRuleset.DefaultMatchTitle;

                if (newTitle == null)
                {
                    newTitle = string.Empty;
                }

                if (_matchConfiguration.TrySetTitle(newTitle, true))
                {
                    if (newTitle != oldTitle)
                    {
                        _matchConfiguration.Title = newTitle;
                        MessageService.BroadcastMatchConfigurationUpdateMessage(new MatchConfigurationUpdateMessage(_matchConfiguration));
                    }
                }
            }

            if (_activeRuleset.RulesetFacilityRules.Any())
            {
                var mapRegions = _activeRuleset.RulesetFacilityRules.Select(r => r.MapRegion).ToList();
                _mapRegions = mapRegions.OrderBy(r => r.FacilityName).ToList();

                _mapZones = _mapRegions.Select(r => r.ZoneId).Distinct().ToList();
            }
            else
            {
                var mapRegions = await FacilityService.GetScrimmableMapRegionsAsync();

                _mapRegions = mapRegions.OrderBy(r => r.FacilityName).ToList();
                _mapZones = _mapRegions.Select(r => r.ZoneId).Distinct().ToList();
            }
        }

        _isLoadingActiveRulesetConfig = false;
        InvokeAsyncStateHasChanged();
    }
    #endregion Initialization Methods

    #region  Match & Subscription State Buttons
    private async Task GetCensusStreamStatus()
    {
        var status = await WebsocketMonitor.GetStatus();
        _isStreamServiceEnabled = status.IsEnabled;

        if (!_isStreamServiceEnabled)
        {
            SetWebsocketConnectionErrorMessage();
        }
        else
        {
            ClearErrorMessage();
        }
    }

    private void SubscribeToCensus()
    {
        ScrimMatchEngine.SubmitPlayersList();

        LogAdminMessage($"Subscribed all characters to Stream Monitor!");
    }

    private void EndCensusSubscription()
    {
        WebsocketMonitor.RemoveAllCharacterSubscriptions();
        LogAdminMessage($"Removed all characters from Stream Monitor!");
    }

    #region Match Controls
    private async void StartMatch()
    {
        if (_isStartingRound)
        {
            return;
        }

        _isStartingRound = true;

        InvokeAsyncStateHasChanged();

        ScrimMatchEngine.ConfigureMatch(_matchConfiguration);

        await Task.Run(() => ScrimMatchEngine.Start());

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();

        _isDeleteDataEnabled = false;

        _isStartingRound = false;

        InvokeAsyncStateHasChanged();
    }

    private async void EndRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running && !_isEndingRound)
        {
            _isEndingRound = true;
            InvokeAsyncStateHasChanged();

            await Task.Run(() => ScrimMatchEngine.EndRound());

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _isDeleteDataEnabled = false;

            _isEndingRound = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private void PauseRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running)
        {
            ScrimMatchEngine.PauseRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _isDeleteDataEnabled = false;

            InvokeAsyncStateHasChanged();
        }
    }

    private void ResumeRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Paused)
        {
            ScrimMatchEngine.ResumeRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _isDeleteDataEnabled = false;

            InvokeAsyncStateHasChanged();
        }
    }

    private async void ClearMatch(bool isRematch)
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Stopped || ScrimMatchEngine.GetMatchState() == MatchState.Uninitialized && !_isResettingRound && !_isClearingMatch)
        {
            _isClearingMatch = true;
            _isDeleteDataEnabled = false;

            InvokeAsyncStateHasChanged();

            await Task.Run(() => ScrimMatchEngine.ClearMatch(isRematch));

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _matchConfiguration = ScrimMatchEngine.MatchConfiguration;

            _matchConfiguration.RoundSecondsTotal = _activeRuleset.DefaultRoundLength;
            _matchConfiguration.Title = (_activeRuleset.DefaultMatchTitle == null) ? string.Empty : _activeRuleset.DefaultMatchTitle;

            _isClearingMatch = false;

            InvokeAsyncStateHasChanged();
        }
        else
        {
            _isClearingMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async void ResetRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Stopped && ScrimMatchEngine.GetCurrentRound() > 0 && !_isResettingRound && !_isClearingMatch)
        {
            _isResettingRound = true;
            _isDeleteDataEnabled = false;

            InvokeAsyncStateHasChanged();

            await Task.Run(() => ScrimMatchEngine.ResetRound());

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _isResettingRound = false;

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Match Controls

    private void OnChangeMatchTitle(string newTitle)
    {
        var oldTitle = _matchConfiguration.Title;

        if (_matchConfiguration.TrySetTitle(newTitle, true))
        {
            if (newTitle != oldTitle)
            {
                _matchConfiguration.Title = newTitle;
                MessageService.BroadcastMatchConfigurationUpdateMessage(new MatchConfigurationUpdateMessage(_matchConfiguration));
            }

        }

    }
    #endregion Match & Subscription State Buttons

    #region  Event Handling
    private void ReceiveMatchStateUpdateMessageEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        var message = e.Message;

        _isRunning = message.MatchState == MatchState.Running;
        _currentRound = message.CurrentRound;
        _matchState = message.MatchState;

        _matchId = message.MatchId;

        _matchConfiguration.Title = message.MatchTitle;

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveMatchConfigurationUpdateMessageEvent(object sender, ScrimMessageEventArgs<MatchConfigurationUpdateMessage> e)
    {
        var message = e.Message;

        _matchConfiguration = message.MatchConfiguration;

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveRulesetSettingChangeEvent(object sender, ScrimMessageEventArgs<RulesetSettingChangeMessage> e)
    {
        var message = e.Message;

        if (!message.ChangedSettings.Contains(RulesetSettingChange.DefaultEndRoundOnFacilityCapture))
        {
            return;
        }

        var success = _matchConfiguration.TrySetEndRoundOnFacilityCapture(message.Ruleset.DefaultEndRoundOnFacilityCapture, false);

        if (success)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    #endregion

    #region Ruleset Form Controls
    private async void OnChangeRulesetSelection(string rulesetStringId)
    {
        _isChangingRuleset = true;
        InvokeAsyncStateHasChanged();

        if (!int.TryParse(rulesetStringId, out var rulesetId))
        {
            _isChangingRuleset = false;
            InvokeAsyncStateHasChanged();
            return;
        }

        if (rulesetId == _selectedRuleset.Id || rulesetId == _activeRuleset.Id)
        {
            _isChangingRuleset = false;
            InvokeAsyncStateHasChanged();
            return;
        }

        var newActiveRuleset = await RulesetManager.ActivateRulesetAsync(rulesetId);

        if (newActiveRuleset == null || newActiveRuleset.Id == _activeRuleset.Id)
        {
            _isChangingRuleset = false;
            InvokeAsyncStateHasChanged();
            return;
        }

        _activeRuleset = newActiveRuleset;
        _selectedRuleset = newActiveRuleset;
        _inputSelectRulesetStringId = newActiveRuleset.Id.ToString();

        await SetUpActiveRulesetConfigAsync();

        _isChangingRuleset = false;
        InvokeAsyncStateHasChanged();

    }
    #endregion Ruleset Form Controls

    #region Log Messages
    private void LogAdminMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);
    }
    #endregion Log Messages

    #region Error Messages
    private void ClearErrorMessage()
    {
        _errorBannerMessage = string.Empty;
    }

    private void SetWebsocketConnectionErrorMessage()
    {
        _errorBannerMessage = "Failed to connect to the Planetside 2 Websocket";
    }
    #endregion Error Messages

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
